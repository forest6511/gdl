version: 1.0

commands:
  - name: pre-pr
    description: "Run comprehensive pre-PR checks to ensure CI will pass"
    shellCommand: |
      #!/bin/bash
      set -e

      # Colors for output
      GREEN='\033[0;32m'
      RED='\033[0;31m'
      YELLOW='\033[1;33m'
      BLUE='\033[0;34m'
      NC='\033[0m'

      echo -e "${BLUE}üöÄ Pre-PR Comprehensive Check${NC}"
      echo "================================"
      echo ""

      FAILED=false

      # 1. Code Formatting
      echo -e "${BLUE}[1/8]${NC} Checking code formatting..."
      if gofmt -s -l . | grep -q .; then
        echo -e "${RED}  ‚úó Formatting issues found${NC}"
        echo "    Run: gofmt -s -w ."
        FAILED=true
      else
        echo -e "${GREEN}  ‚úì Code properly formatted${NC}"
      fi

      # 2. Module Tidy
      echo -e "${BLUE}[2/8]${NC} Checking go.mod..."
      cp go.mod go.mod.bak && cp go.sum go.sum.bak
      go mod tidy
      if ! diff -q go.mod go.mod.bak >/dev/null 2>&1; then
        echo -e "${RED}  ‚úó go.mod needs tidying${NC}"
        FAILED=true
      else
        echo -e "${GREEN}  ‚úì go.mod is tidy${NC}"
      fi
      rm -f go.mod.bak go.sum.bak

      # 3. Go Vet
      echo -e "${BLUE}[3/8]${NC} Running go vet..."
      if ! go vet ./... 2>/dev/null; then
        echo -e "${RED}  ‚úó go vet found issues${NC}"
        FAILED=true
      else
        echo -e "${GREEN}  ‚úì go vet passed${NC}"
      fi

      # 4. Lint Check
      echo -e "${BLUE}[4/8]${NC} Running golangci-lint..."
      if command -v golangci-lint &> /dev/null; then
        if ! golangci-lint run --timeout=5m; then
          echo -e "${RED}  ‚úó Linting failed${NC}"
          FAILED=true
        else
          echo -e "${GREEN}  ‚úì Linting passed${NC}"
        fi
      else
        echo -e "${YELLOW}  ‚ö† golangci-lint not installed${NC}"
      fi

      # 5. Security Check
      echo -e "${BLUE}[5/8]${NC} Running security scan..."
      if command -v gosec &> /dev/null; then
        if ! gosec -quiet -exclude-dir=examples -exclude-dir=test ./... 2>/dev/null; then
          echo -e "${YELLOW}  ‚ö† Security considerations found${NC}"
        else
          echo -e "${GREEN}  ‚úì Security scan passed${NC}"
        fi
      else
        echo -e "${YELLOW}  ‚ö† gosec not installed${NC}"
      fi

      # 6. Test Execution
      echo -e "${BLUE}[6/8]${NC} Running tests..."
      if ! go test -race -short -timeout=5m ./... >/dev/null 2>&1; then
        echo -e "${RED}  ‚úó Tests failed${NC}"
        echo "    Run: go test -v ./..."
        FAILED=true
      else
        echo -e "${GREEN}  ‚úì All tests passed${NC}"
      fi

      # 7. Cross-Platform Build
      echo -e "${BLUE}[7/8]${NC} Testing cross-platform builds..."
      PLATFORMS=("linux/amd64" "darwin/amd64" "windows/amd64" "linux/arm64")
      BUILD_FAILED=false
      for platform in "${PLATFORMS[@]}"; do
        IFS='/' read -r GOOS GOARCH <<< "$platform"
        if ! GOOS=$GOOS GOARCH=$GOARCH go build -o /dev/null ./cmd/gdl 2>/dev/null; then
          echo -e "${RED}    ‚úó $platform build failed${NC}"
          BUILD_FAILED=true
          FAILED=true
        fi
      done
      if [ "$BUILD_FAILED" = false ]; then
        echo -e "${GREEN}  ‚úì All platforms build successfully${NC}"
      fi

      # 8. Example Compilation
      echo -e "${BLUE}[8/8]${NC} Checking examples..."
      EXAMPLE_FAILED=false
      for dir in examples/*/; do
        if [ -f "$dir/main.go" ]; then
          if ! go build -o /dev/null "$dir" 2>/dev/null; then
            echo -e "${RED}    ‚úó $(basename "$dir") failed${NC}"
            EXAMPLE_FAILED=true
            FAILED=true
          fi
        fi
      done
      if [ "$EXAMPLE_FAILED" = false ]; then
        echo -e "${GREEN}  ‚úì All examples compile${NC}"
      fi

      echo ""
      echo "================================"
      if [ "$FAILED" = true ]; then
        echo -e "${RED}‚ùå Pre-PR checks failed!${NC}"
        echo "Fix the issues above before creating PR"
        exit 1
      else
        echo -e "${GREEN}‚úÖ All checks passed! Ready for PR${NC}"
        echo ""
        echo "Next steps:"
        echo "  1. git add -A"
        echo "  2. git commit -m 'your message'"
        echo "  3. git push origin <branch>"
        echo "  4. Create PR on GitHub"
      fi

  - name: quick-check
    description: "Quick validation before commit (faster than pre-pr)"
    shellCommand: |
      #!/bin/bash
      set -e

      echo "üîç Quick Check"
      echo "============="

      # Format check
      echo -n "Format: "
      if gofmt -s -l . | grep -q .; then
        echo "‚ùå Run: gofmt -s -w ."
        exit 1
      else
        echo "‚úÖ"
      fi

      # Vet check
      echo -n "Vet: "
      if ! go vet ./... 2>/dev/null; then
        echo "‚ùå"
        exit 1
      else
        echo "‚úÖ"
      fi

      # Quick test
      echo -n "Tests: "
      if ! go test -short ./... >/dev/null 2>&1; then
        echo "‚ùå"
        exit 1
      else
        echo "‚úÖ"
      fi

      echo ""
      echo "‚úÖ Quick checks passed!"

  - name: fix-issues
    description: "Auto-fix common issues (formatting, imports, mod tidy)"
    shellCommand: |
      #!/bin/bash
      set -e

      echo "üîß Auto-fixing issues..."
      echo "======================="

      # Format code
      echo "Formatting code..."
      gofmt -s -w .

      # Fix imports
      if command -v goimports &> /dev/null; then
        echo "Fixing imports..."
        goimports -w .
      fi

      # Tidy modules
      echo "Tidying modules..."
      go mod tidy

      # Run lint with fix
      if command -v golangci-lint &> /dev/null; then
        echo "Running lint fixes..."
        golangci-lint run --fix
      fi

      echo ""
      echo "‚úÖ Auto-fix complete!"
      echo ""
      echo "Review changes with: git diff"

  - name: ci-status
    description: "Check current CI status for the branch"
    shellCommand: |
      #!/bin/bash

      BRANCH=$(git branch --show-current)
      echo "üîç CI Status for branch: $BRANCH"
      echo "================================"

      # Check GitHub Actions status
      if command -v gh &> /dev/null; then
        echo ""
        echo "Recent workflow runs:"
        gh run list --branch "$BRANCH" --limit 5

        echo ""
        echo "To view details of a run:"
        echo "  gh run view <run-id>"
        echo ""
        echo "To watch a run in progress:"
        echo "  gh run watch"
      else
        echo "GitHub CLI (gh) not installed"
        echo "Install with: brew install gh"
      fi

  - name: test-focus
    description: "Run tests for specific package or test function"
    arguments:
      - name: target
        description: "Package path or test name (e.g., ./internal/core or TestDownload)"
        required: false
    shellCommand: |
      #!/bin/bash
      set -e

      TARGET="${1:-./...}"

      echo "üß™ Running tests for: $TARGET"
      echo "============================"

      if [[ $TARGET == Test* ]]; then
        # Running specific test function
        echo "Running test function: $TARGET"
        go test -v -race -run "^$TARGET" ./...
      else
        # Running package tests
        echo "Running package tests: $TARGET"
        go test -v -race "$TARGET"
      fi

  - name: benchmark
    description: "Run benchmarks for performance testing"
    arguments:
      - name: package
        description: "Package to benchmark (default: ./...)"
        required: false
    shellCommand: |
      #!/bin/bash
      set -e

      PACKAGE="${1:-./...}"

      echo "üìä Running benchmarks for: $PACKAGE"
      echo "===================================="

      go test -bench=. -benchmem -run=^$ "$PACKAGE"

  - name: coverage
    description: "Generate test coverage report"
    shellCommand: |
      #!/bin/bash
      set -e

      echo "üìà Generating coverage report..."
      echo "================================"

      go test -race -coverprofile=coverage.out ./...
      go tool cover -func=coverage.out | grep total

      echo ""
      echo "To view HTML report:"
      echo "  go tool cover -html=coverage.out"

  - name: check-todos
    description: "Find all TODO and FIXME comments in the code"
    shellCommand: |
      #!/bin/bash

      echo "üìù TODO/FIXME Comments"
      echo "====================="

      grep -rn "TODO\|FIXME" --include="*.go" . 2>/dev/null | \
        grep -v vendor | \
        while IFS= read -r line; do
          echo "  $line"
        done

      echo ""
      COUNT=$(grep -r "TODO\|FIXME" --include="*.go" . 2>/dev/null | grep -v vendor | wc -l)
      echo "Total: $COUNT items"

  - name: validate-pr
    description: "Final validation before creating PR (most comprehensive)"
    shellCommand: |
      #!/bin/bash
      set -e

      echo "üöÄ FINAL PR VALIDATION"
      echo "======================"
      echo ""

      # Check for uncommitted changes
      if ! git diff --quiet || ! git diff --cached --quiet; then
        echo "‚ö†Ô∏è  You have uncommitted changes"
        git status --short
        echo ""
        read -p "Continue anyway? [y/N] " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
          exit 1
        fi
      fi

      # Run comprehensive checks
      echo "Running comprehensive validation..."
      echo ""

      # Use pre-push-check if available
      if [ -f ./scripts/pre-push-check.sh ]; then
        ./scripts/pre-push-check.sh --full
      else
        # Fallback to inline checks
        /usr/bin/env bash -c "$(claude slash-command run pre-pr)"
      fi

      # If all checks pass
      echo ""
      echo "================================"
      echo "‚úÖ VALIDATION COMPLETE!"
      echo ""
      echo "Your code is ready for PR!"
      echo ""
      echo "PR Checklist:"
      echo "  ‚ñ° All tests pass"
      echo "  ‚ñ° Code is formatted"
      echo "  ‚ñ° No linting errors"
      echo "  ‚ñ° Cross-platform builds work"
      echo "  ‚ñ° Examples compile"
      echo "  ‚ñ° Documentation updated"
      echo ""
      echo "Create PR at: https://github.com/forest6511/gdl/pulls"